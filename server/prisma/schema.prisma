datasource db {
  provider = "postgresql"
  url      = env("API_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Task {
  id        String   @id
  userId    String
  label     String
  done      Boolean
  createdAt DateTime
}

model User {
  userId    String        @id @unique
  name      String
  myProfile String?
  rating    Float? // 評価フィールド（5段階評価、小数点第1位まで）
  imageUrl  String?
  games     String?
  createdAt DateTime      @default(now())
  game      userGameRank? // ユーザーと生徒は任意の関連付け
  student   Student? // ユーザーと生徒は任意の関連付け
  teacher   Teacher? // ユーザーと教師は任意の関連付け
  Comment   Comment[]
  form      Form[]
}

model userGameRank {
  userId   String   @id
  gameId   Int
  rank     Int
  user     User     @relation(fields: [userId], references: [userId])
  GameList GameList @relation(fields: [gameId], references: [id])
}

model Student {
  userId    String     @id @unique
  user      User       @relation(fields: [userId], references: [userId]) // 必須の関連付け
  apply     apply[]
  Room      Room[]
  favorites Favorite[]
}

model Teacher {
  userId       String       @id @unique
  Achievements String
  hitokoto     String
  user         User         @relation(fields: [userId], references: [userId]) // 必須の関連付け
  bosyuuLists  BosyuuList[] // ここは常に配列型
  Room         Room[]
}

model BosyuuList {
  id                String     @id @default(uuid())
  gameId            Int // この募集に対応するゲームのID
  title             String // 募集のタイトル
  rank              Int
  subjectRank       Int[]
  tag               String[]
  lessonType        String // レッスンの種類
  description       String // 募集の詳細説明
  notes             String // 募集の注意事項
  myProfile         String // 募集者のプロフィール
  descriptionDetail String // 募集の詳細説明
  suchedule         String // 募集の予定notes       String // 募集の注意事項
  teacherId         String // この募集を出した教師のID
  createdAt         DateTime   @default(now()) // 募集の作成日時
  updatedAt         DateTime   @updatedAt // 募集の最終更新日時
  teacher           Teacher    @relation(fields: [teacherId], references: [userId])
  game              GameList   @relation(fields: [gameId], references: [id])
  apply             apply[]
  rooms             Room[]
  Favorite          Favorite[]
}

model Favorite {
  id           String     @id @default(uuid())
  studentId    String // いいねをした生徒のID
  bosyuuListId String // いいねされた募集リストのID
  student      Student    @relation(fields: [studentId], references: [userId])
  bosyuuList   BosyuuList @relation(fields: [bosyuuListId], references: [id])
  createdAt    DateTime   @default(now()) // いいねの日時
}

model apply {
  id        String     @id @default(uuid())
  roomId    String
  bosyuuId  String
  studentId String
  status    String
  date      String
  time      String
  rating    Float? // 評価フィールド（5段階評価、小数点第1位まで）
  review    String? // レビュー
  bosyuu    BosyuuList @relation(fields: [bosyuuId], references: [id])
  student   Student    @relation(fields: [studentId], references: [userId])
  room      Room       @relation(fields: [roomId], references: [id])
}

model GameList {
  id           Int             @id
  title        String // ゲームのタイトル
  genre        String // ゲームのジャンル
  gameRankList GameRanksList[] // ゲームとランクの1対1のリレーション
  bosyuuLists  BosyuuList[] // GameListとBosyuuListの1対多のリレーション
  usrGameRank  userGameRank[]
}

model GameRanksList {
  id     String   @id @default(uuid())
  gameId Int
  rankId Int
  game   GameList @relation(fields: [gameId], references: [id])
}

model Room {
  id            String     @id @unique @default(uuid())
  bosyuuId      String
  hostId        String
  participantId String
  createdAt     DateTime   @default(now())
  status        String
  bosyuu        BosyuuList @relation(fields: [bosyuuId], references: [id])
  host          Teacher    @relation(fields: [hostId], references: [userId])
  participant   Student    @relation(fields: [participantId], references: [userId])
  Comment       Comment[]
  apply         apply[]
}

model Comment {
  id        String   @id @default(uuid()) // コメントのユニークID
  roomId    String // 関連するルームID
  userId    String // コメント投稿者のユーザーID
  content   String // コメントの内容
  createdAt DateTime @default(now()) // コメント作成日時
  updatedAt DateTime @updatedAt // コメント更新日時

  room Room @relation(fields: [roomId], references: [id]) // ルームとの関連付け
  user User @relation(fields: [userId], references: [userId]) // ユーザーとの関連付け
}

model Form {
  id        String   @id @default(uuid())
  userId    String
  comment   String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [userId])
}
